#!/bin/bash

# Check if the correct number of arguments is provided
if [ "$#" -ne 3 ]; then
  echo "Usage: $0 <output_file> <start_date> <end_date>"
  exit 1
fi

# Parameters
output_file=$1
start_date=$2
end_date=$3

# Get the cluster name
cluster_name=$(kubectl config view --minify -o jsonpath='{.clusters[0].name}')

# Output CSV header
echo "AppCode,FirstNamespaceOnboarded,CreationTimestamp,ClusterName,TotalNamespaces" > "$output_file"

# Get all namespaces
namespaces=$(kubectl get namespaces -o jsonpath='{range .items[*]}{.metadata.name},{.metadata.creationTimestamp}{"\n"}{end}')

# Initialize associative arrays using plain shell arrays
earliest_namespace_keys=()
earliest_namespace_values=()
namespace_counts_keys=()
namespace_counts_values=()

# Helper function to find index in array
find_index() {
  local value=$1
  shift
  local arr=("$@")
  for i in "${!arr[@]}"; do
    if [[ "${arr[$i]}" == "$value" ]]; then
      echo $i
      return
    fi
  done
  echo -1
}

# Process each namespace to count and gather data
while IFS=, read -r namespace creationTimestamp; do
  creationDate=$(echo "$creationTimestamp" | cut -d'T' -f1)

  # Filter namespaces by creation date
  if [[ "$creationDate" < "$start_date" ]] || [[ "$creationDate" > "$end_date" ]]; then
    continue
  fi

  appcode=$(echo "$namespace" | cut -d'-' -f1)

  echo "Processing AppCode: $appcode in Namespace: $namespace"

  # Update the earliest namespace creation date and name for this appcode
  index=$(find_index "$appcode" "${earliest_namespace_keys[@]}")
  if [[ $index -eq -1 || "$creationTimestamp" < "${earliest_namespace_values[$index]}" ]]; then
    if [[ $index -eq -1 ]]; then
      earliest_namespace_keys+=("$appcode")
      earliest_namespace_values+=("$creationTimestamp")
    else
      earliest_namespace_values[$index]="$creationTimestamp"
    fi
  fi

  # Increment the namespace count for this appcode
  index=$(find_index "$appcode" "${namespace_counts_keys[@]}")
  if [[ $index -eq -1 ]]; then
    namespace_counts_keys+=("$appcode")
    namespace_counts_values+=(1)
  else
    namespace_counts_values[$index]=$((namespace_counts_values[$index] + 1))
  fi
done <<< "$namespaces"

# Write the aggregated data to the CSV file
for i in "${!earliest_namespace_keys[@]}"; do
  appcode="${earliest_namespace_keys[$i]}"
  creationTimestamp="${earliest_namespace_values[$i]}"
  total_namespaces_index=$(find_index "$appcode" "${namespace_counts_keys[@]}")
  total_namespaces="${namespace_counts_values[$total_namespaces_index]}"
  echo "$appcode,$appcode-${creationTimestamp:0:10},${creationTimestamp:0:10},$cluster_name,$total_namespaces" >> "$output_file"
done

echo "Report generated: $output_file"

# Count total namespaces created between start and end date
total_namespaces_created=$(grep -c ".*" <<< "$namespaces")

echo "Total namespaces created between $start_date and $end_date: $total_namespaces_created"
