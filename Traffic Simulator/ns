#!/bin/bash

# Set fixed start and end dates
start_date="2019-01-01"
end_date=$(date +%Y-%m-%d)  # Today's date

# Function to convert date to epoch time, compatible with both macOS and Linux
to_epoch() {
  local input_date=$1
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    date -j -f "%Y-%m-%d" "$input_date" +%s
  else
    # Linux
    date -d "$input_date" +%s
  fi
}

# Convert start and end dates to seconds since epoch
start_epoch=$(to_epoch "$start_date")
end_epoch=$(to_epoch "$end_date")

# Get the output file from the argument
output_file="$1"
if [ -z "$output_file" ]; then
    echo "Please provide an output file as an argument."
    exit 1
fi

# Get list of namespaces with creation timestamps
namespaces=$(kubectl get namespaces -o json | jq -r '.items[] | [.metadata.name, .metadata.creationTimestamp] | @csv')

# Process namespaces and count those created within the date range and match client appcode criteria
count=0
echo "AppCode,Namespace,First Namespace Onboarded" > "$output_file"

while IFS=',' read -r namespace creationTimestamp; do
    # Extract the date portion (YYYY-MM-DD) and convert to epoch time
    creationDate=$(echo "$creationTimestamp" | cut -d'T' -f1)
    creation_epoch=$(to_epoch "$creationDate")

    # Check if the creation date is within the specified range
    if [ "$creation_epoch" -ge "$start_epoch" ] && [ "$creation_epoch" -le "$end_epoch" ]; then
        # Extract app code from the namespace (first 4 letters before a hyphen)
        appcode=$(echo "$namespace" | cut -d'-' -f1)

        # Filter namespaces with appcodes where the 4th character is '0'
        if [ "${appcode:3:1}" == "0" ]; then
            # Log appcode, namespace, and creation date into the output file
            echo "$appcode,$namespace,$creationDate" >> "$output_file"
            count=$((count + 1))
        fi
    fi
done <<< "$namespaces"

echo "Total client namespaces created between $start_date and $end_date: $count"
echo "Report saved to $output_file"
